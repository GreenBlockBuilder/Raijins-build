{"version":3,"file":"static/js/154.f1668545.chunk.js","mappings":"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","sources":["components/Combobox/Combobox.js","components/Description/index.js","components/BackToTopBtn/index.jsx","components/Footer/index.jsx","components/Layout/index.jsx","components/PageTitle/index.jsx","components/RaijinsModal/index.jsx","components/ScrollButton/index.jsx","components/SectionTitle/index.jsx","components/Staking/EarnedTicketCard.jsx","components/Staking/EarnedTickets.jsx","components/Staking/Hero.jsx","components/Staking/RaijinsStakingCard.jsx","components/Staking/RaijinsStakedCard.jsx","components/Staking/RaijinsStaking.jsx","lib/approveNFT.tsx","components/RaijinsSelect/index.jsx","components/Staking/RewardCalculator.jsx","components/Staking/StakingContainer.jsx","components/Staking/StakingDesc.jsx","pages/Staking/index.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst customStyles = {\r\n  container: (provided) => ({\r\n    ...provided,\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    fontFamily: \"mont\",\r\n    borderRadius: \"25px\",\r\n  }),\r\n  control: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    borderRadius: \"25px\",\r\n    padding: \"0.5rem\",\r\n    border: \"none\",\r\n  }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    borderRadius: \"10px\",\r\n    backgroundColor: state.isFocused ? \"#222222\" : \"#111111\",\r\n    fontFamily: \"mont\",\r\n  }),\r\n  singleValue: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n  noOptionsMessage: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n  }),\r\n  menu: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 1.8px rgba(214, 214, 214, 0.12)\",\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n};\r\n\r\nconst Combobox = ({ options, value, onChange }) => (\r\n  <Select\r\n    options={options}\r\n    styles={customStyles}\r\n    value={value}\r\n    onChange={onChange}\r\n  />\r\n);\r\n\r\nexport default Combobox;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Description = ({ children, classes }) => {\r\n  return <p className={cx(\"description\", classes)}>{children}</p>;\r\n};\r\n\r\nexport default Description;\r\n","import cx from \"classnames\";\r\nimport { IoMdArrowUp } from \"react-icons/io\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst BackToTopBtn = () => {\r\n  const backToTop = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  // ------------------------------------------------\r\n\r\n  return (\r\n    <button className={cx(\"back-to-top-btn\")} onClick={backToTop}>\r\n      <IoMdArrowUp /> back to top\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BackToTopBtn;\r\n","import { Link } from \"react-router-dom\";\r\nimport cx from \"classnames\";\r\nimport BackToTopBtn from \"../BackToTopBtn\";\r\n\r\nimport NineTailsLogoImg from \"assets/images/footer/NinetailsLogo.png\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={cx(\"footer\")}>\r\n      <p className={cx(\"slogan\")}>\r\n        we are <span>inevitable!</span>\r\n      </p>\r\n      <div className={cx(\"links\")}>\r\n        <div className={cx(\"copyright\")}>\r\n          &copy; 2023 by nine tails ink{\" \"}\r\n          <img src={NineTailsLogoImg} alt=\"nine-tails-ink\" />\r\n        </div>\r\n        <div className={cx(\"mail-container\")}>\r\n          <Link to=\"/\">hello@lifeofhel.xyz</Link>\r\n        </div>\r\n        <div className={cx(\"back-to-top-container\")}>\r\n          <BackToTopBtn />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Footer from \"../Footer\";\r\nimport Header from \"../Header/Header\";\r\nimport HorizontalDivider from \"../HorizontalDivider\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      {/* <Header /> */}\r\n      <main>{children}</main>\r\n      <HorizontalDivider />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst PageTitle = ({ children, classes }) => {\r\n  return <h1 className={cx(\"page-title\", classes)}>{children}</h1>;\r\n};\r\n\r\nexport default PageTitle;\r\n","import \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport \"./index.scss\";\r\nimport XImage from \"assets/images/common/X.png\";\r\n\r\n// ================================================\r\n\r\nconst RaijinsModal = ({\r\n  children,\r\n  open,\r\n  setOpen,\r\n  onOpenModal,\r\n  onCloseModal,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      onClose={onCloseModal}\r\n      center\r\n      classNames={{ modal: `raijins-modal ${classes}` }}\r\n    >\r\n      <button onClick={onCloseModal} className=\"shut-btn\">\r\n        <img src={XImage} alt=\"X.png\" />\r\n      </button>\r\n      {children}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RaijinsModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport ScrollBtnImg from \"assets/images/common/Mousedown.gif\";\r\nimport \"./index.scss\";\r\n\r\nconst ScrollButton = () => {\r\n  const [scrollY, setScrollY] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setScrollY(window.scrollY);\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={cx(\"scroll-btn\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={ScrollBtnImg} alt=\"scroll-btn\" width=\"100%\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollButton;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst SectionTitle = ({ children, classes }) => {\r\n  return <h2 className={cx(\"section-title\", classes)}>{children}</h2>;\r\n};\r\n\r\nexport default SectionTitle;\r\n","import cx from \"classnames\";\r\n\r\nconst EarnedTicketCard = ({ data, onNFTImgClick }) => {\r\n  return (\r\n    <div className={cx(\"earned-ticket-card\", \"mb-2\")}>\r\n      <h6 className={cx(\"nft-type\", \"mb-1\")}>\r\n        nft type: <span className={cx(\"italic\")}>{data.label}</span>\r\n      </h6>\r\n      <div className={cx(\"d-flex\", \"justify-center\", \"mb-1\")}>\r\n        {data.images.map((image) => (\r\n          <img\r\n            src={image}\r\n            key={image}\r\n            alt={image}\r\n            width=\"14%\"\r\n            className={cx(\"nft-image\")}\r\n            onClick={() => onNFTImgClick(image)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={cx(\"d-flex\", \"flex-column\", \"gap-1\")}>\r\n        <div className={cx(\"length-ticket\")}>\r\n          7 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day7} ticket{data.day7 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          30 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day30} ticket{data.day30 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          60 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day60} ticket{data.day60 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          90 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day90} ticket{data.day790 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarnedTicketCard;\r\n","import { useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport RaijinsModal from \"components/RaijinsModal\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport Normal1smImg from \"assets/images/nfts/Normal1sm.jpg\";\r\nimport Normal2smImg from \"assets/images/nfts/Normal2sm.jpg\";\r\nimport Normal3smImg from \"assets/images/nfts/Normal3sm.jpg\";\r\nimport Normal4smImg from \"assets/images/nfts/Normal4sm.jpg\";\r\nimport Normal5smImg from \"assets/images/nfts/Normal5sm.jpg\";\r\nimport Normal6smImg from \"assets/images/nfts/Normal6sm.jpg\";\r\nimport Normal7smImg from \"assets/images/nfts/Normal7sm.jpg\";\r\n\r\nimport Deepblack1smImg from \"assets/images/nfts/Deepblack1sm.jpg\";\r\nimport Deepblack2smImg from \"assets/images/nfts/Deepblack2sm.jpg\";\r\nimport Deepblack3smImg from \"assets/images/nfts/Deepblack3sm.jpg\";\r\nimport Deepblack4smImg from \"assets/images/nfts/Deepblack4sm.jpg\";\r\nimport Deepblack5smImg from \"assets/images/nfts/Deepblack5sm.jpg\";\r\nimport Deepblack6smImg from \"assets/images/nfts/Deepblack6sm.jpg\";\r\nimport Deepblack7smImg from \"assets/images/nfts/Deepblack7sm.jpg\";\r\n\r\nimport Jade1smImg from \"assets/images/nfts/Jade1sm.jpg\";\r\nimport Jade2smImg from \"assets/images/nfts/Jade2sm.jpg\";\r\nimport Jade3smImg from \"assets/images/nfts/Jade3sm.jpg\";\r\nimport Jade4smImg from \"assets/images/nfts/Jade4sm.jpg\";\r\nimport Jade5smImg from \"assets/images/nfts/Jade5sm.jpg\";\r\nimport Jade6smImg from \"assets/images/nfts/Jade6sm.jpg\";\r\nimport Jade7smImg from \"assets/images/nfts/Jade7sm.jpg\";\r\n\r\nimport Ghost1smImg from \"assets/images/nfts/Ghost1sm.jpg\";\r\nimport Ghost2smImg from \"assets/images/nfts/Ghost2sm.jpg\";\r\nimport Ghost3smImg from \"assets/images/nfts/Ghost3sm.jpg\";\r\nimport Ghost4smImg from \"assets/images/nfts/Ghost4sm.jpg\";\r\nimport Ghost5smImg from \"assets/images/nfts/Ghost5sm.jpg\";\r\nimport Ghost6smImg from \"assets/images/nfts/Ghost6sm.jpg\";\r\nimport Ghost7smImg from \"assets/images/nfts/Ghost7sm.jpg\";\r\n\r\nimport Avatar0smImg from \"assets/images/nfts/Avatar0sm.png\";\r\nimport Avatar00smImg from \"assets/images/nfts/Avatar00sm.png\";\r\nimport Avatar1smImg from \"assets/images/nfts/Avatar1sm.png\";\r\nimport Avatar2smImg from \"assets/images/nfts/Avatar2sm.png\";\r\nimport Avatar3smImg from \"assets/images/nfts/Avatar3sm.png\";\r\nimport Avatar4smImg from \"assets/images/nfts/Avatar4sm.png\";\r\nimport EarnedTicketCard from \"./EarnedTicketCard\";\r\n\r\n// ================================================\r\n\r\nconst tableData = [\r\n  {\r\n    label: \"raijins\",\r\n    type: \"raijins\",\r\n    images: [\r\n      Avatar0smImg,\r\n      Avatar00smImg,\r\n      Avatar1smImg, \r\n      Avatar2smImg, \r\n      Avatar3smImg, \r\n      Avatar4smImg\r\n    ],\r\n    day7: 5,\r\n    day30: 21,\r\n    day60: 43,\r\n    day90: 70,\r\n    reward: 15,\r\n  },\r\n];\r\n\r\n// ================================================\r\n\r\nconst EarnedTickets = ({ isMobile }) => {\r\n  const [openImgModal, setOpenImgModal] = useState(false);\r\n  const [modalImg, setModalImg] = useState(null);\r\n\r\n  const onNFTImgClick = (image) => {\r\n    return;\r\n    setModalImg(image);\r\n    setOpenImgModal(true);\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setModalImg(null);\r\n    setOpenImgModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className={cx(\"earned-tickets\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        # <img src={RaijinsTicketImg} alt=\"raijins-ticket.png\" width=\"70px\" /> earned{\" \"}\r\n        <span>per staking period</span>\r\n      </SectionTitle>\r\n      {isMobile ? (\r\n        tableData.map((datum) => (\r\n          <EarnedTicketCard\r\n            key={datum.type}\r\n            data={datum}\r\n            onNFTImgClick={onNFTImgClick}\r\n          />\r\n        ))\r\n      ) : (\r\n        <table className={cx(\"earned-tickets-table\")}>\r\n          <thead>\r\n            <tr>\r\n              <th rowSpan={2}></th>\r\n              <th rowSpan={2} className={cx(\"underline\", \"image-cell\")}>\r\n                nft type\r\n              </th>\r\n              <th colSpan={4} className={cx(\"text-right\")}>\r\n                staking length\r\n              </th>\r\n              {/* <th rowSpan={2} className={cx(\"underline\")}>\r\n              staking <br />\r\n              reward boost\r\n            </th> */}\r\n            </tr>\r\n            <tr>\r\n              <th>7 - day</th>\r\n              <th>30 - day</th>\r\n              <th>60 - day</th>\r\n              <th>90 - day</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tableData.map((row) => {\r\n              return (\r\n                <tr key={row.type}>\r\n                  <th className={cx(\"nft-type text-right\")}>{row.label}</th>\r\n                  <td className={cx(\"d-flex\", \"justify-between\", \"image-cell\")}>\r\n                    {row.images.map((image, idx) => {\r\n                      return (\r\n                        <img\r\n                          src={image}\r\n                          alt={`image-${row.type}${idx}.jpg`}\r\n                          key={idx}\r\n                          onClick={() => onNFTImgClick(image)}\r\n                          className={cx(\"nft-image\")}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </td>\r\n                  <td>\r\n                    {row.day7}\r\n                    <br />\r\n                    ticket{row.day7 == 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day30}\r\n                    <br />\r\n                    ticket{row.day30 == 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day60}\r\n                    <br />\r\n                    ticket{row.day60 == 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day90}\r\n                    <br />\r\n                    ticket{row.day90 == 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  {/* <td>\r\n                  {row.reward}\r\n                  <br />\r\n                  boost\r\n                </td> */}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      <RaijinsModal\r\n        open={openImgModal}\r\n        onCloseModal={onCloseModal}\r\n        classes={`p-0 ${isMobile ? \"w-90\" : \"w-30\"}`}\r\n      >\r\n        <img src={modalImg} width=\"100%\" />\r\n      </RaijinsModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarnedTickets;\r\n","import cx from \"classnames\";\r\nimport Description from \"../Description\";\r\nimport PageTitle from \"../PageTitle\";\r\nimport RoundButton from \"../RoundButton\";\r\n\r\nimport VitaImg from \"assets/images/staking/Vita.png\";\r\nimport ScrollButton from \"components/ScrollButton\";\r\n\r\nconst Hero = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  return (\r\n    <div className={cx(\"staking-hero\")}>\r\n      <div className={cx(\"page-intro\")}>\r\n        <PageTitle>\r\n          raijins <span>staking</span>\r\n        </PageTitle>\r\n        <Description>\r\n          Connect your wallet to start staking your Raijins NFTs.\r\n        </Description>\r\n        <Description>For more information, scroll down</Description>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"connect wallet\"\r\n          onBtnClick={connectWallet}\r\n        />\r\n      </div>\r\n      <div className={cx(\"hero-img-container\")}>\r\n        <img src={VitaImg} alt=\"vita.png\" width=\"100%\" />\r\n      </div>\r\n      {/* <div className={cx(\"scrollbtn-wrapper\")}>\r\n        <ScrollButton />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import cx from \"classnames\";\r\n\r\nconst RaijinsStakingCard = ({\r\n  nft,\r\n  timeTypeInfo,\r\n  currentTimeType,\r\n  index,\r\n  selectStatusInWallet,\r\n  handleSelectNFTInWallet,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staking-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          staking period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {timeTypeInfo[currentTimeType].period} day\r\n          </span>{\" \"}\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          estimated reward:\r\n          <br />{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.rewards} raijins tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusInWallet[index] === true}\r\n          onChange={() => handleSelectNFTInWallet(index)}\r\n          value={selectStatusInWallet[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakingCard;\r\n","import cx from \"classnames\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\n\r\nconst RaijinsStakedCard = ({\r\n  nft,\r\n  selectStatusStaked,\r\n  index,\r\n  handleSelectNFTStaked,\r\n  timeTypeInfo,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staked-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          auto restake:{\" \"}\r\n          <button className={cx(\"auto-restake-btn\")}>\r\n            <img\r\n              src={nft.autoRestake === true ? CircularArrowImg : XImage}\r\n              alt=\"arrow.png\"\r\n              width=\"100%\"\r\n            />\r\n          </button>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          remaining period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.leftTime} days left\r\n            <br />({timeTypeInfo[nft.timeType].period} days programme)\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          next reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.nextTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          claimable reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.claimableTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusStaked[index] === true}\r\n          onChange={() => handleSelectNFTStaked(index)}\r\n          value={selectStatusStaked[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakedCard;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport cx from \"classnames\";\r\nimport useSWR from \"swr\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport TableDecoImg from \"assets/images/staking/tableDeco.png\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\nimport RoundButton from \"../RoundButton\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { RAIJINS_NFTS, REWARD_AMOUNTS, VOLUME1_METADATA, COLLECTION_OPTIONS } from \"config/staking\";\r\nimport { callContract, contractFetcher } from \"lib/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { approveNFT } from \"lib/approveNFT\";\r\nimport StakingRaijins from \"abis/StakingRaijins.json\";\r\nimport Raijins from \"abis/Raijins.json\";\r\nimport RaijinsStakingCard from \"./RaijinsStakingCard\";\r\nimport RaijinsStakedCard from \"./RaijinsStakedCard\";\r\nimport Combobox from '../Combobox/Combobox';\r\nimport {\r\n  formatAmount,\r\n} from \"lib/numbers\";\r\n\r\nconst timeTypeInfo = [\r\n  {\r\n    label: \"7-day\",\r\n    id: \"seven\",\r\n    period: 7,\r\n  },\r\n  {\r\n    label: \"30-day\",\r\n    id: \"thirty\",\r\n    period: 30,\r\n  },\r\n  {\r\n    label: \"60-day\",\r\n    id: \"sixty\",\r\n    period: 60,\r\n  },\r\n  {\r\n    label: \"90-day\",\r\n    id: \"ninety\",\r\n    period: 90,\r\n  },\r\n];\r\n\r\nconst getRarity = (collection, tokenId) => {\r\n  // add code\r\n\r\n  return 0;\r\n};\r\n\r\nconst loadWalletNFTs = (dataWallet, timeType) => {\r\n  if (dataWallet === undefined) return [];\r\n\r\n  if (dataWallet.length === 0) return [];\r\n\r\n  const ret = dataWallet.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (\r\n        RAIJINS_NFTS[i].address.toLowerCase() === item.token_address.toLowerCase()\r\n      ) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item.token_id.toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item.token_id.toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    const rarity = getRarity(nftInfo.address, item.token_id.toString());\r\n    const rewards = REWARD_AMOUNTS[rarity][timeType];\r\n    return {\r\n      id: item.token_id.toString(),\r\n      name: item.name,\r\n      address: nftInfo.address,\r\n      image: imageURL,\r\n      rewards: rewards,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nconst loadStakedNFTs = (dataContract) => {\r\n  if (dataContract === undefined) return [];\r\n\r\n  if (dataContract.length === 0) return [];\r\n\r\n  const ret = dataContract.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (RAIJINS_NFTS[i].address.toLowerCase() === item[0].toLowerCase()) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    const tokenId = parseInt(item[1].toString());\r\n    const timeType = parseInt(item[2].toString());\r\n    const startTime = parseInt(item[3].toString());\r\n    const autoRestake = item[4];\r\n    const isClaimed = item[5];\r\n    const pendingTicket = parseInt(formatAmount(item[6], 18, 0));\r\n\r\n    const rarity = getRarity(nftInfo.address, tokenId);\r\n    const endTime = startTime + timeTypeInfo[timeType].period * 24 * 3600;\r\n    const currentTime = new Date().getTime() / 1000;\r\n    let leftTime = 0;\r\n    let nextTicket = 0;\r\n\r\n    if (!autoRestake) {\r\n      if (isClaimed || currentTime > endTime) {\r\n        leftTime = 0;\r\n        nextTicket = 0;\r\n      } else {\r\n        leftTime = endTime - currentTime;\r\n        nextTicket = REWARD_AMOUNTS[rarity][timeType];\r\n      }\r\n    } else {\r\n      leftTime =\r\n        (timeTypeInfo[timeType].period * 24 * 3600) - ((currentTime - startTime) % (timeTypeInfo[timeType].period * 24 * 3600));\r\n      nextTicket = REWARD_AMOUNTS[rarity][timeType];\r\n    }\r\n\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item[1].toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item[1].toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      name: nftInfo.name,\r\n      image: imageURL,\r\n      address: nftInfo.address,\r\n      id: tokenId,\r\n      timeType: timeType,\r\n      leftTime: parseInt(leftTime / (24 * 3600)) + 1,\r\n      autoRestake: autoRestake,\r\n      nextTicket: nextTicket,\r\n      claimableTicket: pendingTicket,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nlet walletNFTSelection = [];\r\nlet stakedNFTSelection = [];\r\n\r\nconst RaijinsStaking = ({ isMobile }) => {\r\n  const { active, library, account } = useWeb3React();\r\n\r\n  const [currentTimeType, setCurrentTimeType] = useState(0);\r\n  const [disabledClaimBtn, setDisabledClaimBtn] = useState(true);\r\n  const [disabledUnStakeBtn, setDisabledUnStakeBtn] = useState(true);\r\n  const [disabledAddRestakeBtn, setDisabledAddRestakeBtn] = useState(true);\r\n  const [disabledCancelRestakeBtn, setDisabledCancelRestakeBtn] =\r\n    useState(true);\r\n  const [selectStatusInWallet, setSelectStatusInWallet] = useState([]);\r\n  const [selectStatusStaked, setSelectStatusStaked] = useState([]);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isWaitingForApproval, setIsWaitingForApproval] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCollection, setSelectedCollection] = useState(COLLECTION_OPTIONS[0]);\r\n\r\n  const regInputForCollectionId = React.useRef();\r\n\r\n  const { chainId } = useChainId();\r\n  const stakingRaijinsAddress = getContract(chainId, \"StakingRaijins\");\r\n\r\n  // const { data: dataMoralis } = useSWR(\r\n  //   [account],\r\n  //   { fetcher: moralisFetcher(account), }\r\n  // );\r\n  const nftAddresses = RAIJINS_NFTS.map((item) => item.address);\r\n  //////////Reading Wallet///////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataWallet } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getTokensInWallet\",\r\n      nftAddresses,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n  const filteredDataWallet = dataWallet ? dataWallet.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  let nftsInWallet = loadWalletNFTs(filteredDataWallet, currentTimeType);\r\n  //////////Reading Staking Contract////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataContract } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getStakingInfo\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n  const filteredDataContract = dataContract ? dataContract.filter((item) => item._address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  const nftsStaked = loadStakedNFTs(filteredDataContract);\r\n\r\n  /////////Approval Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: collectionApprovals } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getApprovalStatus\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n\r\n  let needApproval = true;\r\n  if (collectionApprovals) {\r\n    const filteredCollectionApprovals = collectionApprovals ? collectionApprovals.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n    needApproval = !filteredCollectionApprovals[0].isApproval;\r\n  }\r\n\r\n  const [disabledStakeBtn, setDisabledStakeBtn] = useState(!needApproval);\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleSelectNFTInWallet = (index) => {\r\n    const itemInfo = nftsInWallet[index];\r\n\r\n    const selectedItem = walletNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      walletNFTSelection = walletNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      const currentItem = walletNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    if (walletNFTSelection.length === 0 && !needApproval)\r\n      setDisabledStakeBtn(true);\r\n    else setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleSelectNFTStaked = (index) => {\r\n    const itemInfo = nftsStaked[index];\r\n\r\n    const selectedItem = stakedNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      stakedNFTSelection = stakedNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      const currentItem = stakedNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    if (stakedNFTSelection.length === 0) {\r\n      setDisabledClaimBtn(true);\r\n      setDisabledUnStakeBtn(true);\r\n      setDisabledAddRestakeBtn(true);\r\n      setDisabledCancelRestakeBtn(true);\r\n    } else {\r\n      setDisabledClaimBtn(false);\r\n      setDisabledUnStakeBtn(false);\r\n      setDisabledAddRestakeBtn(false);\r\n      setDisabledCancelRestakeBtn(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    setSelectStatusInWallet(items);\r\n    setDisabledStakeBtn(true);\r\n  };\r\n\r\n  const handleSelectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledClaimBtn(false);\r\n    setDisabledUnStakeBtn(false);\r\n    setDisabledAddRestakeBtn(false);\r\n    setDisabledCancelRestakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledClaimBtn(true);\r\n    setDisabledUnStakeBtn(true);\r\n    setDisabledAddRestakeBtn(true);\r\n    setDisabledCancelRestakeBtn(true);\r\n  };\r\n\r\n  const handleTimeType = (index) => {\r\n    setCurrentTimeType(index);\r\n  };\r\n\r\n  const approveFromNFT = () => {\r\n    if (needApproval) {\r\n      approveNFT({\r\n        setIsApproving,\r\n        library,\r\n        tokenAddress: selectedCollection.address,\r\n        spender: stakingRaijinsAddress,\r\n        chainId: chainId,\r\n        onApproveSubmitted: () => {\r\n          setIsWaitingForApproval(true);\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleStake = () => {\r\n    if (needApproval) {\r\n      approveFromNFT();\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    const nftToStake = walletNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = walletNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const timeType = tokenId.map((item) => {\r\n      return currentTimeType;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"stake\", [nftToStake, tokenId, timeType], {\r\n      sentMsg: \"Staking Raijins NFT submitted!\",\r\n      failMsg: \"Staking Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n        setIsSubmitting(false);\r\n      });\r\n\r\n    handleUnselectAllInWallet();\r\n  };\r\n\r\n  const getTextStake = () => {\r\n    if (needApproval && isWaitingForApproval) {\r\n      return \"Waiting for Approval...\";\r\n    }\r\n    if (isApproving) {\r\n      return \"Approving\";\r\n    }\r\n    if (needApproval) {\r\n      return \"Approve\";\r\n    }\r\n\r\n    if (isSubmitting) {\r\n      return \"Staking...\";\r\n    }\r\n\r\n    return \"Stake\";\r\n  };\r\n\r\n  const handleClaim = () => {\r\n    const nftToClaim = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"claimRewards\", [nftToClaim, tokenId], {\r\n      sentMsg: \"Claim Raijins Ticket submitted!\",\r\n      failMsg: \"Claim Raijins Ticket failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleUnStake = () => {\r\n    const nftToUnStake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"unStake\", [nftToUnStake, tokenId], {\r\n      sentMsg: \"Unstake Raijins NFT submitted!\",\r\n      failMsg: \"Unstake Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleAddRestake = () => {\r\n    const nftToAddRestake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(\r\n      chainId,\r\n      contract,\r\n      \"addAutoRestake\",\r\n      [nftToAddRestake, tokenId],\r\n      {\r\n        sentMsg: \"Add AutoRestake Raijins NFT submitted!\",\r\n        failMsg: \"Add AutoRestake Raijins NFT failed.\",\r\n        // setPendingTxns,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleCancelRestake = () => {\r\n    const nftToCancelRestake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(\r\n      chainId,\r\n      contract,\r\n      \"removeAutoRestake\",\r\n      [nftToCancelRestake, tokenId],\r\n      {\r\n        sentMsg: \"Cancel AutoRestake Raijins NFT submitted!\",\r\n        failMsg: \"Cancel AutoRestake Raijins NFT failed.\",\r\n        // setPendingTxns,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (needApproval) setIsWaitingForApproval(false);\r\n  }, [needApproval, active]);\r\n\r\n  useEffect(() => {\r\n    handleUnselectAllInWallet();\r\n    handleUnselectAllStaked();\r\n  }, [selectedCollection]);\r\n\r\n  return (\r\n    <div className={cx(\"raijins-staking\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        Raijins <span>staking</span>\r\n      </SectionTitle>\r\n      <Combobox ref={regInputForCollectionId} options={COLLECTION_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} />\r\n      <Tabs className={cx(\"raijins-staking-tabs\")}>\r\n        <TabList>\r\n          <Tab>\r\n            {/* <h6>Volumes</h6> */}\r\n            <p>\r\n              <span>{nftsInWallet ? nftsInWallet.length : 0}</span> in wallet\r\n            </p>\r\n          </Tab>\r\n          <Tab>\r\n            {/* <h6>Avatars</h6> */}\r\n            <p>\r\n              <span>{nftsStaked ? nftsStaked.length : 0}</span> staked\r\n            </p>\r\n          </Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsInWallet && nftsInWallet.length ? (\r\n                nftsInWallet.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      timeTypeInfo={timeTypeInfo}\r\n                      currentTimeType={currentTimeType}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusInWallet}\r\n                      handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsInWallet ? nftsInWallet.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    {/* <th>boost</th> */}\r\n                    <th>staking period</th>\r\n                    <th>estimated reward</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsInWallet && nftsInWallet.length ? (\r\n                    nftsInWallet.map((item, index) => {\r\n                      return (\r\n                        <tr key={item.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={item.image} alt={`${item.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {item.name} #{item.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusInWallet[index] === true}\r\n                                onChange={() => handleSelectNFTInWallet(index)}\r\n                                value={selectStatusInWallet[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                          {/* <td className=\"percent text-success\">\r\n                        15%\r\n                        <br />\r\n                        <span className=\"text-danger\">\r\n                          ({item.days} days unlisted)\r\n                        </span>\r\n                      </td> */}\r\n                          <td className=\"days\">\r\n                            <span className=\"text-primary\">\r\n                              {timeTypeInfo[currentTimeType].period}\r\n                            </span>{\" \"}\r\n                            day\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"text-primary\">{item.rewards}</span>{\" \"}\r\n                            raijins tickets\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No NFTs in wallet\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllInWallet}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"stake\"\r\n              text={getTextStake()}\r\n              variant=\"primary\"\r\n              disabled={disabledStakeBtn}\r\n              onBtnClick={handleStake}\r\n            />\r\n            {timeTypeInfo.map((btn, index) => (\r\n              <RoundButton\r\n                key={btn.id}\r\n                text={btn.label}\r\n                variant={currentTimeType === index ? \"danger\" : \"transparent\"}\r\n                onBtnClick={() => handleTimeType(index)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsStaked && nftsStaked.length ? (\r\n                nftsStaked.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakedCard\r\n                      nft={item}\r\n                      index={index}\r\n                      selectStatusStaked={selectStatusStaked}\r\n                      handleSelectNFTStaked={handleSelectNFTStaked}\r\n                      timeTypeInfo={timeTypeInfo}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsStaked ? nftsStaked.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    <th>auto-restake</th>\r\n                    <th>remaining period</th>\r\n                    <th>rewards</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsStaked && nftsStaked.length ? (\r\n                    nftsStaked.map((nft, index) => {\r\n                      return (\r\n                        <tr key={nft.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={nft.image} alt={`${nft.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {nft.name} #{nft.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusStaked[index] === true}\r\n                                onClick={() => handleSelectNFTStaked(index)}\r\n                                value={selectStatusStaked[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            <button className={cx(\"auto-restake-btn\")}>\r\n                              <img\r\n                                src={\r\n                                  nft.autoRestake === true\r\n                                    ? CircularArrowImg\r\n                                    : XImage\r\n                                }\r\n                                alt=\"arrow.png\"\r\n                                width=\"100%\"\r\n                              />\r\n                            </button>\r\n                          </td>\r\n                          <td className=\"days\">\r\n                            <span className=\"text-primary\">{nft.leftTime}</span>{\" \"}\r\n                            days left\r\n                            <br />\r\n                            <span className=\"text-danger\">\r\n                              ({timeTypeInfo[nft.timeType].period} days\r\n                              programme)\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"mb-2\">\r\n                              <span className=\"text-primary\">next reward:</span>\r\n                              <br />\r\n                              <span className=\"text-danger\">\r\n                                {nft.nextTicket}\r\n                              </span>\r\n                              {\" raijins tickets\"}\r\n                            </div>\r\n                            <div>\r\n                              <span className=\"text-primary\">\r\n                                claimable reward:\r\n                              </span>\r\n                              <br />\r\n                              <span className=\"text-danger\">\r\n                                {nft.claimableTicket}\r\n                              </span>\r\n                              {\" raijins tickets\"}\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No staked NFTs\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllStaked}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"claim\"\r\n              text=\"claim rewards\"\r\n              variant=\"transparent\"\r\n              disabled={disabledClaimBtn}\r\n              onBtnClick={handleClaim}\r\n            />\r\n            <RoundButton\r\n              key=\"unstake\"\r\n              text=\"unstake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledUnStakeBtn}\r\n              onBtnClick={handleUnStake}\r\n            />\r\n            {/* <RoundButton\r\n              key=\"add_auto_restake\"\r\n              text=\"add auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledAddRestakeBtn}\r\n              onBtnClick={handleAddRestake}\r\n            />\r\n            <RoundButton\r\n              key=\"cancel_auto_restake\"\r\n              text=\"cancel auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledCancelRestakeBtn}\r\n              onBtnClick={handleCancelRestake}\r\n            /> */}\r\n          </div>\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStaking;\r\n","import { ethers } from \"ethers\";\r\nimport Token from \"abis/Raijins.json\";\r\nimport { getExplorerUrl } from \"config/chains\";\r\nimport { helperToast } from \"lib/helperToast\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport ExternalLink from \"components/ExternalLink/ExternalLink\";\r\n\r\ntype Params = {\r\n  setIsApproving: (val: boolean) => void;\r\n  library: Web3ReactContextInterface[\"library\"];\r\n  tokenAddress: string;\r\n  spender: string;\r\n  chainId: number;\r\n  onApproveSubmitted: () => void;\r\n  pendingTxns: any[];\r\n  setPendingTxns: (txns: any[]) => void;\r\n  includeMessage?: boolean;\r\n};\r\n\r\nexport function approveNFT({\r\n  setIsApproving,\r\n  library,\r\n  tokenAddress,\r\n  spender,\r\n  chainId,\r\n  onApproveSubmitted,\r\n  pendingTxns,\r\n  setPendingTxns,\r\n  includeMessage,\r\n}: Params) {\r\n  setIsApproving(true);\r\n  const contract = new ethers.Contract(tokenAddress, Token, library.getSigner());\r\n  contract\r\n    .setApprovalForAll(spender, true)\r\n    .then(async (res) => {\r\n      const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\r\n      helperToast.success(\r\n        <div>\r\n          Approval submitted! <ExternalLink href={txUrl}>View status.</ExternalLink>\r\n          <br />\r\n        </div>\r\n      );\r\n      if (onApproveSubmitted) {\r\n        onApproveSubmitted();\r\n      }\r\n      if (pendingTxns && setPendingTxns) {\r\n        const pendingTxn = {\r\n          hash: res.hash,\r\n          message: includeMessage ? `Raijins NFT Approved!` : false,\r\n        };\r\n        setPendingTxns([...pendingTxns, pendingTxn]);\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n      let failMsg;\r\n      if (\r\n        [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"].includes(\r\n          e.data?.message\r\n        )\r\n      ) {\r\n        failMsg = (\r\n          <div>\r\n            There is not enough MATIC in your account on Polygon to send this transaction.\r\n            <br />\r\n            <br />\r\n            <ExternalLink href=\"https://www.mexc.com/\">Bridge MATIC to Polygon</ExternalLink>\r\n          </div>\r\n        );\r\n      } else if (e.message?.includes(\"User denied transaction signature\")) {\r\n        failMsg = `Approval was cancelled`;\r\n      } else {\r\n        failMsg = `Approval failed`;\r\n      }\r\n      helperToast.error(failMsg);\r\n    })\r\n    .finally(() => {\r\n      setIsApproving(false);\r\n    });\r\n}\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\nconst RaijinsSelect = ({ options, handleChange }) => {\r\n  return (\r\n    <div className={cx(\"raijins-select-container\")}>\r\n      <label>\r\n        <select className={cx(\"raijins-select\")} onChange={handleChange}>\r\n          {options &&\r\n            options.length &&\r\n            options.map((option) => {\r\n              return (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.text}\r\n                </option>\r\n              );\r\n            })}\r\n        </select>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsSelect;\r\n","import cx from \"classnames\";\r\nimport React, { useState } from \"react\";\r\nimport Description from \"../Description\";\r\nimport RaijinsSelect from \"../RaijinsSelect\";\r\nimport RoundButton from \"../RoundButton\";\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport Arrow1Img from \"assets/images/common/Arrow1.png\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport { REWARD_AMOUNTS } from \"config/staking\";\r\n\r\nconst calculatorOptions = [\r\n  {\r\n    key: \"raijins nft type\",\r\n    options: [\r\n      {\r\n        value: 0,\r\n        text: \"raijins\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    key: \"staking duration\",\r\n    options: [\r\n      {\r\n        value: 0,\r\n        text: \"7-day\",\r\n      },\r\n      {\r\n        value: 1,\r\n        text: \"30-day\",\r\n      },\r\n      {\r\n        value: 2,\r\n        text: \"60-day\",\r\n      },\r\n      {\r\n        value: 3,\r\n        text: \"90-day\",\r\n      },\r\n    ],\r\n  },\r\n  // {\r\n  //   key: \"reward boost\",\r\n  //   options: [\r\n  //     {\r\n  //       value: \"yes\",\r\n  //       text: \"yes\",\r\n  //     },\r\n  //     {\r\n  //       value: \"no\",\r\n  //       text: \"no\",\r\n  //     },\r\n  //   ],\r\n  // },\r\n];\r\n\r\nconst RewardCalculator = ({ isMobile }) => {\r\n  const [calculatorValue, setCalculatorValue] = useState(0);\r\n  const [rarity, setRarity] = useState(0);\r\n  const [timeType, setTimeType] = useState(0);\r\n\r\n  const handleCalculate = () => {\r\n    setCalculatorValue(REWARD_AMOUNTS[rarity][timeType]);\r\n  };\r\n\r\n  const handleRarity = (rarity) => {\r\n    setRarity(rarity);\r\n  };\r\n\r\n  const handleTimeType = (timeType) => {\r\n    setTimeType(timeType);\r\n  };\r\n\r\n  return (\r\n    <div className={cx(\"reward-calculator\", \"mb-7\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        staking reward <span>calculator</span>\r\n      </SectionTitle>\r\n      <Description classes={cx(\"text-center\", \"mb-5\")}>\r\n        Please use the below tool to estimate the amount of Raijins Tickets awarded\r\n        based on your staking criteria\r\n      </Description>\r\n      <div\r\n        className={cx(\r\n          \"d-flex\",\r\n          \"justify-between\",\r\n          \"gap-1\",\r\n          \"mb-5\",\r\n          isMobile ? \"flex-column\" : \"flex-row\"\r\n        )}\r\n      >\r\n        {calculatorOptions.map((options, index) => (\r\n          <RaijinsSelect\r\n            key={options.key}\r\n            options={options.options}\r\n            handleChange={\r\n              index === 0\r\n                ? (e) => handleRarity(e.target.value)\r\n                : (e) => handleTimeType(e.target.value)\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={cx(\"text-center\", \"mb-6\")}>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"calculate rewards\"\r\n          onBtnClick={handleCalculate}\r\n        />\r\n      </div>\r\n      <div className={cx(\"result-container\", \"mb-3\")}>\r\n        <img src={Arrow1Img} alt=\"arrow.png\" />\r\n        <div className={cx(\"result\")}>{calculatorValue}</div>\r\n        <img src={Arrow1Img} alt=\"arrow.png\" />\r\n      </div>\r\n      <div className=\"raijins-tickets-container\">\r\n        <h5 className=\"title\">raijins tickets</h5>\r\n        <img src={RaijinsTicketImg} alt=\"raijins-ticket.png\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RewardCalculator;\r\n","import cx from \"classnames\";\r\n\r\nconst StakingContainer = ({ children }) => {\r\n  return <div className={cx(\"staking-container\")}>{children}</div>;\r\n};\r\n\r\nexport default StakingContainer;\r\n","import cx from \"classnames\";\r\n\r\nimport NiQuizImg from \"assets/images/staking/NiQuiz.png\";\r\nimport Arrow1Img from \"assets/images/common/Arrow1.png\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport DangerKeepOutImg from \"assets/images/earn/DangerKeepOut.png\";\r\nimport Description from \"../Description\";\r\n\r\nconst StakingDesc = ({ isMobile }) => {\r\n  return (\r\n    <div className={cx(\"staking-desc\")}>\r\n      <div className={cx(\"staking-desc-img-container\")}>\r\n        <img src={NiQuizImg} alt=\"NiQuiz.png\" width=\"100%\" />\r\n      </div>\r\n      <div className={cx(\"staking-description-container\")}>\r\n        <Description classes=\"text-center mb-5\">\r\n          Once staked, each Raijins NFTs will provide you with Raijins Tickets. Amount\r\n          of Raijins Tickets earned will change based on the staking period length\r\n          and type of Raijins NFTs staked.\r\n        </Description>\r\n        <div\r\n          className={cx(\r\n            \"d-flex\",\r\n            \"justify-center\",\r\n            \"align-center\",\r\n            \"gap-2\",\r\n            \"mb-5\"\r\n          )}\r\n        >\r\n          <h5 className={cx(\"text-center\", \"section-title\")}>\r\n            raijins nfts <span className={cx(\"text-danger\")}>staking</span>\r\n          </h5>\r\n          <img\r\n            src={Arrow1Img}\r\n            alt=\"arrow.png\"\r\n            width={isMobile ? \"40px\" : \"80px\"}\r\n          />\r\n          <img\r\n            src={RaijinsTicketImg}\r\n            alt=\"raijins-ticket.png\"\r\n            width={isMobile ? \"100px\" : \"200px\"}\r\n          />\r\n        </div>\r\n        <div\r\n          className={cx(\"d-flex\", \"justify-between\", \"align-center\", \"gap-2\")}\r\n        >\r\n          <img\r\n            src={DangerKeepOutImg}\r\n            alt=\"danger-keep-out.png\"\r\n            width=\"40px\"\r\n            className={isMobile ? \"d-none\" : \"d-block\"}\r\n          />\r\n          <div>\r\n            <p className={cx(\"reward-boost-desc\", \"text-primary\")}>\r\n              Raijins Tickets will be awarded at the end of each staking period.\r\n              Awarded Raijins Tickets can be claimed at anytime by pressing either\r\n              the “CLAIM REWARDS” or the “UNSTAKE” buttons – the latter will\r\n              also unstake your Raijins NFTs. Staking can be undone at any moment;\r\n              however, pending Raijins Tickets will be automatically forfeit\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StakingDesc;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport Layout from \"components/Layout\";\r\nimport EarnedTickets from \"components/Staking/EarnedTickets\";\r\nimport Hero from \"components/Staking/Hero\";\r\nimport RaijinsStaking from \"components/Staking/RaijinsStaking\";\r\nimport RewardCalculator from \"components/Staking/RewardCalculator\";\r\nimport StakingContainer from \"components/Staking/StakingContainer\";\r\nimport StakingDesc from \"components/Staking/StakingDesc\";\r\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\r\n\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Staking = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  const { active, library, account } = useWeb3React();\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 640px)\");\r\n\r\n  return (\r\n    <Layout>\r\n      <StakingContainer>\r\n        {!active ? (\r\n          <>\r\n            <Hero connectWallet={connectWallet} />\r\n            <StakingDesc isMobile={isMobile} />\r\n            <EarnedTickets isMobile={isMobile} />\r\n            <RewardCalculator isMobile={isMobile} />\r\n          </>\r\n        ) : (\r\n          <RaijinsStaking isMobile={isMobile} />\r\n        )}\r\n      </StakingContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Staking;\r\n"],"names":["customStyles","container","provided","_objectSpread","boxShadow","fontFamily","borderRadius","control","backgroundColor","padding","border","option","state","isFocused","singleValue","color","noOptionsMessage","menu","input","_ref","options","value","onChange","_jsx","Select","styles","children","classes","className","cx","_jsxs","onClick","window","scrollTo","top","behavior","IoMdArrowUp","src","NineTailsLogoImg","alt","Link","to","BackToTopBtn","_Fragment","HorizontalDivider","Footer","open","onCloseModal","setOpen","onOpenModal","Modal","onClose","center","classNames","modal","concat","XImage","_useState","useState","_useState2","_slicedToArray","setScrollY","useEffect","handleScroll","scrollY","addEventListener","removeEventListener","ScrollBtnImg","width","data","onNFTImgClick","label","images","map","image","day7","day30","day60","day90","day790","tableData","type","Avatar0smImg","Avatar00smImg","Avatar1smImg","Avatar2smImg","Avatar4smImg","reward","isMobile","openImgModal","setOpenImgModal","_useState3","_useState4","modalImg","setModalImg","SectionTitle","RaijinsTicketImg","datum","EarnedTicketCard","rowSpan","colSpan","row","idx","RaijinsModal","props","connectWallet","PageTitle","Description","RoundButton","variant","text","onBtnClick","VitaImg","nft","timeTypeInfo","currentTimeType","index","selectStatusInWallet","handleSelectNFTInWallet","name","id","period","rewards","checked","htmlFor","selectStatusStaked","handleSelectNFTStaked","autoRestake","CircularArrowImg","leftTime","timeType","nextTicket","claimableTicket","walletNFTSelection","stakedNFTSelection","_useWeb3React","useWeb3React","active","library","account","setCurrentTimeType","disabledClaimBtn","setDisabledClaimBtn","_useState5","_useState6","disabledUnStakeBtn","setDisabledUnStakeBtn","_useState7","_useState8","setDisabledAddRestakeBtn","_useState9","_useState10","setDisabledCancelRestakeBtn","_useState11","_useState12","setSelectStatusInWallet","_useState13","_useState14","setSelectStatusStaked","_useState15","_useState16","isApproving","setIsApproving","_useState17","_useState18","isWaitingForApproval","setIsWaitingForApproval","_useState19","_useState20","isSubmitting","setIsSubmitting","_useState21","COLLECTION_OPTIONS","_useState22","selectedCollection","setSelectedCollection","regInputForCollectionId","React","chainId","useChainId","stakingRaijinsAddress","getContract","nftAddresses","RAIJINS_NFTS","item","address","dataWallet","useSWR","fetcher","contractFetcher","StakingRaijins","nftsInWallet","undefined","length","i","toLowerCase","token_address","nftInfo","imageURL","imageHash","VOLUME1_METADATA","Number","token_id","toString","imageType","rarity","REWARD_AMOUNTS","filter","loadWalletNFTs","dataContract","nftsStaked","tokenId","parseInt","startTime","isClaimed","pendingTicket","formatAmount","endTime","currentTime","Date","getTime","loadStakedNFTs","_address","collectionApprovals","needApproval","filteredCollectionApprovals","isApproval","_useState23","_useState24","disabledStakeBtn","setDisabledStakeBtn","itemInfo","selectedItem","find","push","items","_loop","_loop2","handleUnselectAllInWallet","handleUnselectAllStaked","approveFromNFT","tokenAddress","spender","onApproveSubmitted","pendingTxns","setPendingTxns","includeMessage","ethers","Token","getSigner","setApprovalForAll","then","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","txUrl","pendingTxn","wrap","_context","prev","next","getExplorerUrl","hash","helperToast","success","ExternalLink","href","message","_toConsumableArray","stop","_x","apply","arguments","catch","e","_e$data","_e$message","failMsg","console","error","includes","finally","approveNFT","Combobox","ref","selectedOption","Tabs","TabList","Tab","TabPanel","RaijinsStakingCard","disabled","nftToStake","contract","callContract","sentMsg","btn","handleTimeType","RaijinsStakedCard","nftToClaim","_ref3","_callee2","_context2","_x2","nftToUnStake","_ref4","_callee3","_context3","_x3","handleChange","calculatorOptions","key","calculatorValue","setCalculatorValue","setRarity","setTimeType","RaijinsSelect","handleRarity","target","Arrow1Img","NiQuizImg","DangerKeepOutImg","useMediaQuery","Layout","StakingContainer","RaijinsStaking","Hero","StakingDesc","EarnedTickets","RewardCalculator"],"sourceRoot":""}